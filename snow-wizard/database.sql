-- MySQL Script generated by MySQL Workbench
-- Sun Apr 19 17:55:43 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Mountains`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Mountains` (
  `MID` TINYINT(1),
  `Name` VARCHAR(50) NOT NULL,
  `Latitude` FLOAT NOT NULL,
  `Longitude` FLOAT NOT NULL,
  `SnowDate` INT,
  PRIMARY KEY (`MID`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC),
  UNIQUE INDEX `MID_UNIQUE` (`MID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Clients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Clients` (
  `UID` INT,
  `Latitude` FLOAT,
  `Longitude` FLOAT,
  PRIMARY KEY (`UID`),
  UNIQUE INDEX `UserID_UNIQUE` (`UID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`HomeMT`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`HomeMT` (
  `UID` INT,
  `MID` TINYINT(1),
  INDEX `fk_HomeMT_UserInfo1_idx` (`UID` ASC),
  INDEX `fk_HomeMT_Mountains1_idx` (`MID` ASC),
  CONSTRAINT `fk_HomeMT_UserInfo1`
    FOREIGN KEY (`UID`)
    REFERENCES `mydb`.`Clients` (`UID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_HomeMT_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Daily`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Daily` (
  `MID` TINYINT(1),
  `Day` TINYINT(1),
  `sunriseTime` VARCHAR(10) NOT NULL,
  `sunsetTime` VARCHAR(10) NOT NULL,
  `precipIntensity` FLOAT NOT NULL,
  `precipIntensityMax` FLOAT NOT NULL,
  `precipProbability` FLOAT NOT NULL,
  `precipType` VARCHAR(10) NOT NULL,
  `temperatureHigh` FLOAT NOT NULL,
  `temperatureLow` FLOAT NOT NULL,
  `humidity` FLOAT NOT NULL,
  `windSpeed` FLOAT NOT NULL,
  `windGust` FLOAT NOT NULL,
  `windGustTime` VARCHAR(10) NOT NULL,
  `windBearing` INT NOT NULL,
  `visibility` FLOAT NOT NULL,
  `predictedSnow` INT NOT NULL,
  INDEX `fk_Daily_Mountains1_idx` (`MID` ASC),
  PRIMARY KEY (`Day`, `MID`),
  CONSTRAINT `fk_Daily_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Hourly`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Hourly` (
  `MID` TINYINT(1),
  `Hour` TINYINT(2),
  `precipIntensity` FLOAT NOT NULL,
  `precipProbability` FLOAT NOT NULL,
  `precipType` VARCHAR(10) NOT NULL,
  `temperature` FLOAT NOT NULL,
  `apparentTemp` FLOAT NOT NULL,
  `humidity` FLOAT NOT NULL,
  `windSpeed` FLOAT NOT NULL,
  `windGust` FLOAT NOT NULL,
  `windBearing` INT NOT NULL,
  `cloudCover` FLOAT NOT NULL,
  `visibility` FLOAT NOT NULL,
  `predictedSnow` INT NOT NULL,
  INDEX `fk_Hourly_Mountains1_idx` (`MID` ASC),
  PRIMARY KEY (`Hour`, `MID`),
  CONSTRAINT `fk_Hourly_Mountains1`
    FOREIGN KEY (`MID`)
    REFERENCES `mydb`.`Mountains` (`MID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortLex`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortLex` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortRecent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortRecent` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`SortPredicted`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SortPredicted` (`MID` INT, `Day` INT, `sunriseTime` INT, `sunsetTime` INT, `precipIntensity` INT, `precipIntensityMax` INT, `precipProbability` INT, `precipType` INT, `temperatureHigh` INT, `temperatureLow` INT, `humidity` INT, `windSpeed` INT, `windGust` INT, `windGustTime` INT, `windBearing` INT, `visibility` INT, `predictedSnow` INT);

-- -----------------------------------------------------
-- procedure createUser
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `createUser` (
    OUT newID INT
)
BEGIN
	SET newID = 0;
	SELECT MAX(UID) INTO newID FROM Clients;
	INSERT INTO Clients(UID, Latitude, Longitude) VALUES (newID + 1, 0, 0);
	SELECT newID + 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure toggleHome
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `toggleHome` (
	IN UserID INT,
    IN MntID INT
)
BEGIN
	DELETE FROM HomeMT WHERE UID = UserID AND MID = MntID;
    IF ROW_COUNT() = 0 THEN 
		INSERT INTO HomeMT(UID, MID) VALUES (UserID, MntID);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getMountainHourly
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `getMountainHourly` (
	IN MntID INT,
    IN Now INT
)
BEGIN
	SELECT * FROM Hourly
    WHERE MntID = MID 
	  AND Hour >= Now 
	  AND Hour < (Now + 24);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getMountainDaily
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `getMountainDaily` (
	IN MntID INT
)
BEGIN
	SELECT * FROM  Daily WHERE MntID = MID;
END$$

-- -----------------------------------------------------
-- procedure searchDistance
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchDistance` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
	DECLARE baseLat, baseLon FLOAT DEFAULT 0;
	SELECT Latitude, Longitude INTO baseLat, baseLon FROM UserInfo WHERE UID = UserID;
    IF Home THEN
		SELECT Daily.*
        FROM Daily INNER JOIN Mountains ON Daily.MID = Mountains.MID
        WHERE Daily.Day = 0 AND Daily.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID)
		ORDER BY (
			SQRT(POW( Latitude-baseLat, 2) + 
				 POW(Longitude-baseLon, 2))
		) ASC;
	ELSE
		SELECT Daily.*
        FROM Daily INNER JOIN Mountains ON Daily.MID = Mountains.MID
        WHERE Daily.Day = 0 
        ORDER BY (
            SQRT(POW( Latitude-baseLat, 2) + 
				 POW(Longitude-baseLon, 2))
		) ASC;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchLex
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchLex` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortLex WHERE SortLex.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortLex;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchRecent
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchRecent` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortRecent WHERE SortRecent.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortRecent;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure searchPredicted
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `searchPredicted` (
	IN UserID INT,
    IN Home BOOLEAN
)
BEGIN
    IF Home THEN
		SELECT * FROM SortPredicted WHERE SortPredicted.MID IN
			(SELECT MID FROM HomeMT WHERE UID = UserID);
	ELSE
		SELECT * FROM SortPredicted;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateDatabase
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `updateDatabase` ()
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    UPDATE Mountains
    SET SnowDate = SnowDate - 1;
	SET SQL_SAFE_UPDATES = 1;
    
    UPDATE Mountains
    SET Mountains.SnowDate = 0
    WHERE Mountains.MID = Daily.MID
		AND Daily.Day = 0
        AND Daily.precipType = 'snow';
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateCoordinates
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `updateCoordinates` (
	IN UserID INT,
    IN Lat FLOAT,
    IN Lon FLOAT)
BEGIN
	UPDATE Clients
    SET Latitude = Lat, Longitude = Lon
    WHERE UID = UserID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`SortLex`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortLex`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortLex` AS
	SELECT *
    FROM Daily WHERE Day = 0
    ORDER BY MID ASC;

-- -----------------------------------------------------
-- View `mydb`.`SortRecent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortRecent`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortRecent` AS
	SELECT Daily.*
    FROM Daily INNER JOIN Mountains ON Mountains.MID = Daily.MID
	WHERE Daily.Day = 0
    ORDER BY Mountains.recentSnow;

-- -----------------------------------------------------
-- View `mydb`.`SortPredicted`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`SortPredicted`;
USE `mydb`;
CREATE  OR REPLACE VIEW `SortPredicted` AS
	SELECT * FROM DAILY WHERE precipType = 'snow' ORDER BY Day;

    
CREATE USER 'BaseUser' IDENTIFIED BY 'password';

GRANT ALL ON `mydb`.* TO 'BaseUser';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `mydb`.* TO 'BaseUser';
GRANT SELECT ON TABLE `mydb`.* TO 'BaseUser';
GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'BaseUser';

CREATE USER 'AllUsers';

GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'AllUsers';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

INSERT INTO Mountains(MID,Name,Latitude,Longitude,SnowDate,SnowDepth)
VALUES
	(1,"Baker Mountain",45.0847,-69.9056,0,0),
	(2,"Big Rock",46.5154,-67.8661,0,0),
	(3,"Big Squaw",45.5067,-69.7020,0,0),
	(4,"Black Mountain of Maine",44.5770,-70.6133,0,0),
	(5,"Camden Snow Bowl",44.2173,-69.1347,0,0),
	(6,"Eaton Mountain",44.7681,-69.6194,0,0),
	(7,"Hermon Mountain",44.8040,-68.9197,0,0),
	(8,"Lonesome Pine Trails",47.2587,-68.5897,0,0),
	(9,"Mount Abram",44.3798,-70.7069,0,0),
	(10,"Mount Jefferson Ski Area",45.3523,-68.2822,0,0),
	(11,"Powderhouse Hill",43.2369,-70.8022,0,0),
	(12,"QuoggyJo",46.7210,-67.9323,0,0),
	(13,"Saddleback Maine",44.9367,-70.5031,0,0),
	(14,"Shawnee Peak",44.0590,-70.8155,0,0),
	(15,"Sugarloaf",45.0314,-70.3131,0,0),
	(16,"Sunday River",44.4734,-70.8569,0,0),
	(17,"Titcomb Mountain",44.65,-70.1708,0,0),
	(18,"Abenaki Ski Area",43.6132,-71.2319,0,0),
	(19,"Arrowhead",43.3637,-72.3338,0,0),
	(20,"Attitash",44.0828,-71.2294,0,0),
	(21,"Black Mountain",44.2253,071.1556,0,0),
	(22,"Bretton Woods",44.2597,-71.4622,0,0),
	(23,"Cannon Mountain",44.1565,-71.6984,0,0),
	(24,"Campton Mountain",43.8473,-71.5806,0,0),
	(25,"Cranmore Mountain Resort",44.0565,-71.1102,0,0),
	(26,"Crotched Mountain",42.9984,-71.8737,0,0),
	(27,"Dartmouth Skiway",43.7877,-72.0995,0,0),
	(28,"Franklin Veterans Memorial Recreation Area",43.4324,-71.7327,0,0),
	(29,"Granite Gorge",42.9710,-72.2120,0,0),
	(30,"Gunstock Mountain Resort",43.5256,-71.3784,0,0),
	(31,"Kanc Rec Area",44.0513,-71.6602,0,0),
	(32,"King Pine",43.8714,-71.0894,0,0),
	(33,"Loon Mountain",44.0360,-71.6214,0,0),
	(34,"McIntyre Ski Area",43.005,-71.44,0,0),
	(35,"Mount Eustis",45.1808,-70.4578,0,0),
	(36,"Mount Prospect",44.4411,-71.5804,0,0),
	(37,"Mount Sunapee Resort",43.3876,-72.0879,0,0),
	(38,"Pats Peak",43.1623,-71.7962,0,0),
	(39,"Ragged Mountain",43.4701,-71.8375,0,0),
	(40,"Red Hill Ski Club",43.7484,-71.41501,0,0),
	(41,"Storrs Hill",43.6352,-72.2521,0,0),
	(42,"Tenney Mountain Ski Resort",43.7378,-71.7836,0,0),
	(43,"Waterville Valley Resort",43.9591,-71.5233,0,0),
	(44,"Whaleback",44.0872,-71.6194,0,0),
	(45,"Wildcat Mountain",44.2641,71.2394,0,0),
	(46,"Bolton Valley Resort",44.421070,-72.849480,0,0),
	(47,"Bromley Mountain",43.2279,-72.9387,0,0),
	(48,"Burke Mountain",44.5878,-71.9164,0,0),
	(49,"Cochrans Ski Area",44.396568,-72.982147,0,0),
	(50,"Harrington Hill",41.9301,-72.0551,0,0),
	(51,"Hard Ack",44.8153,-73.0667,0,0),
	(52,"Haystack",42.9140,-72.9195,0,0),
	(53,"Jay Peak Resort",44.9649,-72.4602,0,0),
	(54,"Killington Ski Resort",43.6776,-72.7798,0,0),
	(55,"Living Memorial Park",42.8480,-72.5865,0,0),
	(56,"Lyndon Outing Club",44.533100,-71.987297,0,0),
	(57,"Mad River Glen",44.2025,-72.9175,0,0),
	(58,"Magic Mountain",43.201790,-72.772697,0,0),
	(59,"Middlebury College Snow Bowl",43.9392,-72.9576,0,0),
	(60,"Mount Snow",42.9602,-72.9204,0,0),
	(61,"Okemo Mountain",43.4018,-72.7170,0,0),
	(62,"Pico Mountain",43.6621,-72.8425,0,0),
	(63,"Plymouth Notch",43.5303,-72.7386,0,0),
	(64,"Quechee Lakes Ski Area",43.6551767,-72.4422527,0,0),
	(65,"Smugglers Notch",44.5885,-72.7900,0,0),
	(66,"Stowe Mountain Resort",44.5303,-72.7814,0,0),
	(67,"Stratton Mountain Resort",43.1134,-72.9081,0,0),
	(68,"Sugarbush Resort",44.1359,-72.8944,0,0),
	(69,"Suicide Six",43.6651,-72.5433,0,0);
    
INSERT INTO Clients(UID, Latitude, Longitude)
VALUE (0, NULL, NULL);
