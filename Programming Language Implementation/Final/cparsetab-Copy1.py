
# cparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleft+-left*/rightUMINUSNOTAE AND DE DEC DOUBLE DOUBLE_TYPE ELSE EQ FOR GE GT ID IF INC INTEGER INTEGER_TYPE LE LT ME MOD NE NOT OR PRINT RETURN STRING STRING_TYPE TE VOID_TYPE WHILE\n    program : stmt_list\n    \n    stmt_list : stmt stmt_list\n              | empty\n    \n    stmt : VOID_TYPE ID '(' opt_formal_args ')' stmt\n    \n    stmt : data_type ID '(' opt_formal_args ')' stmt\n    \n    stmt : data_type ID opt_init ';'\n    \n    stmt : storable '=' exp ';'\n         | storable AE exp ';'\n         | storable ME exp ';'\n         | storable TE exp ';'\n         | storable DE exp ';'\n    \n    stmt : PRINT '(' exp ')' ';'\n    \n    stmt : ID '(' opt_actual_args ')' ';'\n    \n    stmt : RETURN opt_exp ';'\n    \n    stmt : WHILE '(' exp ')' stmt\n    \n    stmt : FOR '(' data_type ID '=' exp ';' exp ';' exp ')' stmt\n    \n    stmt : FOR '(' ID '=' exp ';' exp ';' exp ')' stmt\n    \n    stmt : IF '(' exp ')' stmt opt_else\n    \n    stmt : '{' stmt_list '}'\n    \n    data_type : primitive_type\n    \n    data_type : primitive_type '[' INTEGER ']'\n    \n    primitive_type : INTEGER_TYPE\n    \n    primitive_type : DOUBLE_TYPE\n    \n    primitive_type :  STRING_TYPE\n    \n    opt_formal_args : formal_args\n                    | empty\n    \n    formal_args : data_type ID ',' formal_args\n    \n    formal_args : data_type ID\n    \n    opt_init : '=' exp\n    \n    opt_init : '=' '{' exp_list '}'\n    \n    opt_init : empty\n    \n    exp_list : exp ',' exp_list\n    \n    exp_list : exp\n    \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp ',' actual_args\n                | exp\n    \n    opt_exp : exp\n            | empty\n    \n    opt_else : ELSE stmt\n             | empty\n    \n    exp : exp '+' exp\n    \n    exp : exp '-' exp\n    \n    exp : exp '*' exp\n    \n    exp : exp '/' exp\n    \n    exp : exp EQ exp\n        | exp LE exp\n        | exp GE exp\n        | exp LT exp\n        | exp GT exp\n        | exp NE exp\n        | exp MOD exp\n        | exp AND exp\n        | exp OR exp\n    \n    exp : INTEGER\n    \n    exp : DOUBLE\n    \n    exp : STRING\n    \n    exp : storable\n    \n    exp : ID '(' opt_actual_args ')'\n    \n    exp : '(' exp ')'\n    \n    exp : '-' exp %prec UMINUS\n    \n    exp : NOT exp\n    \n    storable : ID\n    \n    storable : ID '[' exp ']'\n    \n    storable : INC ID\n    storable : DEC ID\n    \n    storable : INC ID '[' exp ']'\n    storable : DEC ID '[' exp ']'\n    \n    empty :\n    "
    
_lr_action_items = {'VOID_TYPE':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[5,5,5,-14,-19,-6,-7,-8,-9,-10,-11,5,5,5,-13,5,-12,-15,-69,-4,-5,-18,5,-41,-40,5,5,-17,-16,]),'PRINT':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[9,9,9,-14,-19,-6,-7,-8,-9,-10,-11,9,9,9,-13,9,-12,-15,-69,-4,-5,-18,9,-41,-40,9,9,-17,-16,]),'ID':([0,3,5,7,10,14,15,16,17,18,19,20,23,24,26,27,28,29,30,31,35,41,42,43,44,45,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,85,88,90,91,95,97,100,102,103,104,105,106,107,124,126,127,128,131,133,135,138,140,141,143,146,148,150,152,153,154,155,158,160,162,163,166,167,168,169,],[6,6,22,25,40,6,-20,48,49,-22,-23,-24,40,40,40,40,40,40,40,40,40,40,40,40,86,40,40,-14,40,40,40,40,40,40,40,40,40,40,40,40,40,40,125,-19,40,40,132,40,-6,40,-7,-8,-9,-10,-11,6,40,6,-21,6,-13,6,-12,-15,40,-69,-4,-5,40,40,-18,6,-41,40,-40,40,40,6,6,-17,-16,]),'RETURN':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[10,10,10,-14,-19,-6,-7,-8,-9,-10,-11,10,10,10,-13,10,-12,-15,-69,-4,-5,-18,10,-41,-40,10,10,-17,-16,]),'WHILE':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[11,11,11,-14,-19,-6,-7,-8,-9,-10,-11,11,11,11,-13,11,-12,-15,-69,-4,-5,-18,11,-41,-40,11,11,-17,-16,]),'FOR':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[12,12,12,-14,-19,-6,-7,-8,-9,-10,-11,12,12,12,-13,12,-12,-15,-69,-4,-5,-18,12,-41,-40,12,12,-17,-16,]),'IF':([0,3,14,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[13,13,13,-14,-19,-6,-7,-8,-9,-10,-11,13,13,13,-13,13,-12,-15,-69,-4,-5,-18,13,-41,-40,13,13,-17,-16,]),'{':([0,3,14,58,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,148,153,154,155,160,166,167,168,169,],[14,14,14,102,-14,-19,-6,-7,-8,-9,-10,-11,14,14,14,-13,14,-12,-15,-69,-4,-5,-18,14,-41,-40,14,14,-17,-16,]),'$end':([0,1,2,3,4,21,66,88,100,103,104,105,106,107,133,138,140,143,146,148,153,155,160,168,169,],[-69,0,-1,-69,-3,-2,-14,-19,-6,-7,-8,-9,-10,-11,-13,-12,-15,-69,-4,-5,-18,-41,-40,-17,-16,]),'INC':([0,3,10,14,23,24,26,27,28,29,30,31,35,41,42,43,45,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,88,90,91,97,100,102,103,104,105,106,107,124,126,127,131,133,135,138,140,141,143,146,148,150,152,153,154,155,158,160,162,163,166,167,168,169,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-19,16,16,16,-6,16,-7,-8,-9,-10,-11,16,16,16,16,-13,16,-12,-15,16,-69,-4,-5,16,16,-18,16,-41,16,-40,16,16,16,16,-17,-16,]),'DEC':([0,3,10,14,23,24,26,27,28,29,30,31,35,41,42,43,45,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,88,90,91,97,100,102,103,104,105,106,107,124,126,127,131,133,135,138,140,141,143,146,148,150,152,153,154,155,158,160,162,163,166,167,168,169,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-14,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-19,17,17,17,-6,17,-7,-8,-9,-10,-11,17,17,17,17,-13,17,-12,-15,17,-69,-4,-5,17,17,-18,17,-41,17,-40,17,17,17,17,-17,-16,]),'INTEGER_TYPE':([0,3,14,44,50,56,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,147,148,153,154,155,160,166,167,168,169,],[18,18,18,18,18,18,-14,-19,-6,-7,-8,-9,-10,-11,18,18,18,-13,18,-12,-15,-69,-4,18,-5,-18,18,-41,-40,18,18,-17,-16,]),'DOUBLE_TYPE':([0,3,14,44,50,56,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,147,148,153,154,155,160,166,167,168,169,],[19,19,19,19,19,19,-14,-19,-6,-7,-8,-9,-10,-11,19,19,19,-13,19,-12,-15,-69,-4,19,-5,-18,19,-41,-40,19,19,-17,-16,]),'STRING_TYPE':([0,3,14,44,50,56,66,88,100,103,104,105,106,107,124,127,131,133,135,138,140,143,146,147,148,153,154,155,160,166,167,168,169,],[20,20,20,20,20,20,-14,-19,-6,-7,-8,-9,-10,-11,20,20,20,-13,20,-12,-15,-69,-4,20,-5,-18,20,-41,-40,20,20,-17,-16,]),'}':([3,4,14,21,36,37,38,39,40,46,48,49,66,80,83,88,98,100,103,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,123,133,136,137,138,139,140,143,144,145,146,148,153,155,157,160,168,169,],[-69,-3,-69,-2,-55,-56,-57,-58,-63,88,-65,-66,-14,-61,-62,-19,-64,-6,-7,-8,-9,-10,-11,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-60,-13,149,-33,-12,-59,-15,-69,-67,-68,-4,-5,-18,-41,-32,-40,-17,-16,]),'(':([6,9,10,11,12,13,22,23,24,25,26,27,28,29,30,31,35,40,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[23,31,41,43,44,45,50,41,41,56,41,41,41,41,41,41,41,81,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'=':([6,8,25,48,49,86,98,125,144,145,],[-63,26,58,-65,-66,126,-64,141,-67,-68,]),'AE':([6,8,48,49,98,144,145,],[-63,27,-65,-66,-64,-67,-68,]),'ME':([6,8,48,49,98,144,145,],[-63,28,-65,-66,-64,-67,-68,]),'TE':([6,8,48,49,98,144,145,],[-63,29,-65,-66,-64,-67,-68,]),'DE':([6,8,48,49,98,144,145,],[-63,30,-65,-66,-64,-67,-68,]),'[':([6,15,18,19,20,40,48,49,],[24,47,-22,-23,-24,24,90,91,]),'INTEGER':([10,23,24,26,27,28,29,30,31,35,41,42,43,45,47,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,89,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'DOUBLE':([10,23,24,26,27,28,29,30,31,35,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'STRING':([10,23,24,26,27,28,29,30,31,35,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'-':([10,23,24,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,45,48,49,54,55,58,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,90,91,97,98,101,102,109,110,111,112,113,114,115,116,117,118,119,120,121,123,126,129,130,137,139,141,142,144,145,150,151,152,158,159,161,162,163,164,165,],[35,35,35,35,35,35,35,35,35,68,35,-55,-56,-57,-58,-63,35,35,35,35,-65,-66,68,68,35,68,68,68,68,68,68,35,35,35,35,35,35,35,35,35,35,35,35,35,-61,35,68,-62,68,68,35,35,35,-64,68,35,-42,-43,-44,-45,68,68,68,68,68,68,68,68,68,-60,35,68,68,68,-59,35,68,-67,-68,35,68,35,35,68,68,35,35,68,68,]),'NOT':([10,23,24,26,27,28,29,30,31,35,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),';':([10,25,32,33,34,36,37,38,39,40,48,49,57,59,60,61,62,63,64,80,83,96,98,101,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,139,142,144,145,149,151,159,161,],[-69,-69,66,-38,-39,-55,-56,-57,-58,-63,-65,-66,100,-31,103,104,105,106,107,-61,-62,133,-64,-29,138,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-60,-59,152,-67,-68,-30,158,162,163,]),')':([23,36,37,38,39,40,48,49,50,51,52,53,54,56,65,80,81,82,83,84,87,92,93,94,98,99,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,132,134,139,144,145,156,164,165,],[-69,-55,-56,-57,-58,-63,-65,-66,-69,96,-34,-35,-37,-69,108,-61,-69,123,-62,124,127,131,-25,-26,-64,135,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,139,-60,-28,-36,-59,-67,-68,-27,166,167,]),'+':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[67,-55,-56,-57,-58,-63,-65,-66,67,67,67,67,67,67,67,67,-61,67,-62,67,67,-64,67,-42,-43,-44,-45,67,67,67,67,67,67,67,67,67,-60,67,67,67,-59,67,-67,-68,67,67,67,67,67,]),'*':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[69,-55,-56,-57,-58,-63,-65,-66,69,69,69,69,69,69,69,69,-61,69,-62,69,69,-64,69,69,69,-44,-45,69,69,69,69,69,69,69,69,69,-60,69,69,69,-59,69,-67,-68,69,69,69,69,69,]),'/':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[70,-55,-56,-57,-58,-63,-65,-66,70,70,70,70,70,70,70,70,-61,70,-62,70,70,-64,70,70,70,-44,-45,70,70,70,70,70,70,70,70,70,-60,70,70,70,-59,70,-67,-68,70,70,70,70,70,]),'EQ':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[71,-55,-56,-57,-58,-63,-65,-66,71,71,71,71,71,71,71,71,-61,71,-62,71,71,-64,71,-42,-43,-44,-45,-46,-47,71,71,71,71,71,71,71,-60,71,71,71,-59,71,-67,-68,71,71,71,71,71,]),'LE':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[72,-55,-56,-57,-58,-63,-65,-66,72,72,72,72,72,72,72,72,-61,72,-62,72,72,-64,72,-42,-43,-44,-45,-46,-47,72,72,72,72,72,72,72,-60,72,72,72,-59,72,-67,-68,72,72,72,72,72,]),'GE':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[73,-55,-56,-57,-58,-63,-65,-66,73,73,73,73,73,73,73,73,-61,73,-62,73,73,-64,73,-42,-43,-44,-45,-46,-47,73,73,73,73,73,73,73,-60,73,73,73,-59,73,-67,-68,73,73,73,73,73,]),'LT':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[74,-55,-56,-57,-58,-63,-65,-66,74,74,74,74,74,74,74,74,-61,74,-62,74,74,-64,74,-42,-43,-44,-45,-46,-47,74,74,74,74,74,74,74,-60,74,74,74,-59,74,-67,-68,74,74,74,74,74,]),'GT':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[75,-55,-56,-57,-58,-63,-65,-66,75,75,75,75,75,75,75,75,-61,75,-62,75,75,-64,75,-42,-43,-44,-45,-46,-47,75,75,75,75,75,75,75,-60,75,75,75,-59,75,-67,-68,75,75,75,75,75,]),'NE':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[76,-55,-56,-57,-58,-63,-65,-66,76,76,76,76,76,76,76,76,-61,76,-62,76,76,-64,76,-42,-43,-44,-45,-46,-47,76,76,76,76,76,76,76,-60,76,76,76,-59,76,-67,-68,76,76,76,76,76,]),'MOD':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[77,-55,-56,-57,-58,-63,-65,-66,77,77,77,77,77,77,77,77,-61,77,-62,77,77,-64,77,-42,-43,-44,-45,-46,-47,77,77,77,77,77,77,77,-60,77,77,77,-59,77,-67,-68,77,77,77,77,77,]),'AND':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[78,-55,-56,-57,-58,-63,-65,-66,78,78,78,78,78,78,78,78,-61,78,-62,78,78,-64,78,-42,-43,-44,-45,-46,-47,78,78,78,78,78,78,78,-60,78,78,78,-59,78,-67,-68,78,78,78,78,78,]),'OR':([33,36,37,38,39,40,48,49,54,55,60,61,62,63,64,65,80,82,83,84,87,98,101,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,137,139,142,144,145,151,159,161,164,165,],[79,-55,-56,-57,-58,-63,-65,-66,79,79,79,79,79,79,79,79,-61,79,-62,79,79,-64,79,-42,-43,-44,-45,-46,-47,79,79,79,79,79,79,79,-60,79,79,79,-59,79,-67,-68,79,79,79,79,79,]),',':([36,37,38,39,40,48,49,54,80,83,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,132,137,139,144,145,],[-55,-56,-57,-58,-63,-65,-66,97,-61,-62,-64,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-60,147,150,-59,-67,-68,]),']':([36,37,38,39,40,48,49,55,80,83,89,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,129,130,139,144,145,],[-55,-56,-57,-58,-63,-65,-66,98,-61,-62,128,-64,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-60,144,145,-59,-67,-68,]),'ELSE':([66,88,100,103,104,105,106,107,133,138,140,143,146,148,153,155,160,168,169,],[-14,-19,-6,-7,-8,-9,-10,-11,-13,-12,-15,154,-4,-5,-18,-41,-40,-17,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,14,],[2,21,46,]),'stmt':([0,3,14,124,127,131,135,154,166,167,],[3,3,3,140,143,146,148,160,168,169,]),'empty':([0,3,10,14,23,25,50,56,81,143,],[4,4,34,4,53,59,94,94,53,155,]),'data_type':([0,3,14,44,50,56,124,127,131,135,147,154,166,167,],[7,7,7,85,95,95,7,7,7,7,95,7,7,7,]),'storable':([0,3,10,14,23,24,26,27,28,29,30,31,35,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,124,126,127,131,135,141,150,152,154,158,162,163,166,167,],[8,8,39,8,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,8,39,8,8,8,39,39,39,8,39,39,39,8,8,]),'primitive_type':([0,3,14,44,50,56,124,127,131,135,147,154,166,167,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'opt_exp':([10,],[32,]),'exp':([10,23,24,26,27,28,29,30,31,35,41,42,43,45,58,67,68,69,70,71,72,73,74,75,76,77,78,79,81,90,91,97,102,126,141,150,152,158,162,163,],[33,54,55,60,61,62,63,64,65,80,82,83,84,87,101,109,110,111,112,113,114,115,116,117,118,119,120,121,54,129,130,54,137,142,151,137,159,161,164,165,]),'opt_actual_args':([23,81,],[51,122,]),'actual_args':([23,81,97,],[52,52,134,]),'opt_init':([25,],[57,]),'opt_formal_args':([50,56,],[92,99,]),'formal_args':([50,56,147,],[93,93,156,]),'exp_list':([102,150,],[136,157,]),'opt_else':([143,],[153,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_prog','cfrontend.py',23),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','cfrontend.py',30),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','cfrontend.py',31),
  ('stmt -> VOID_TYPE ID ( opt_formal_args ) stmt','stmt',6,'p_stmt_1','cfrontend.py',53),
  ('stmt -> data_type ID ( opt_formal_args ) stmt','stmt',6,'p_stmt_2','cfrontend.py',59),
  ('stmt -> data_type ID opt_init ;','stmt',4,'p_stmt_3','cfrontend.py',65),
  ('stmt -> storable = exp ;','stmt',4,'p_stmt_4','cfrontend.py',71),
  ('stmt -> storable AE exp ;','stmt',4,'p_stmt_4','cfrontend.py',72),
  ('stmt -> storable ME exp ;','stmt',4,'p_stmt_4','cfrontend.py',73),
  ('stmt -> storable TE exp ;','stmt',4,'p_stmt_4','cfrontend.py',74),
  ('stmt -> storable DE exp ;','stmt',4,'p_stmt_4','cfrontend.py',75),
  ('stmt -> PRINT ( exp ) ;','stmt',5,'p_stmt_5','cfrontend.py',92),
  ('stmt -> ID ( opt_actual_args ) ;','stmt',5,'p_stmt_6','cfrontend.py',98),
  ('stmt -> RETURN opt_exp ;','stmt',3,'p_stmt_7','cfrontend.py',104),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_stmt_8','cfrontend.py',110),
  ('stmt -> FOR ( data_type ID = exp ; exp ; exp ) stmt','stmt',12,'p_stmt_9','cfrontend.py',116),
  ('stmt -> FOR ( ID = exp ; exp ; exp ) stmt','stmt',11,'p_stmt_10','cfrontend.py',122),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_stmt_11','cfrontend.py',128),
  ('stmt -> { stmt_list }','stmt',3,'p_stmt_12','cfrontend.py',134),
  ('data_type -> primitive_type','data_type',1,'p_data_type_1','cfrontend.py',144),
  ('data_type -> primitive_type [ INTEGER ]','data_type',4,'p_data_type_2','cfrontend.py',150),
  ('primitive_type -> INTEGER_TYPE','primitive_type',1,'p_primitive_type_1','cfrontend.py',161),
  ('primitive_type -> DOUBLE_TYPE','primitive_type',1,'p_primitive_type_2','cfrontend.py',167),
  ('primitive_type -> STRING_TYPE','primitive_type',1,'p_primitive_type_3','cfrontend.py',173),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_opt_formal_args','cfrontend.py',180),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_opt_formal_args','cfrontend.py',181),
  ('formal_args -> data_type ID , formal_args','formal_args',4,'p_formal_args_1','cfrontend.py',191),
  ('formal_args -> data_type ID','formal_args',2,'p_formal_args_2','cfrontend.py',197),
  ('opt_init -> = exp','opt_init',2,'p_opt_init_1','cfrontend.py',208),
  ('opt_init -> = { exp_list }','opt_init',4,'p_opt_init_2','cfrontend.py',214),
  ('opt_init -> empty','opt_init',1,'p_opt_init_3','cfrontend.py',220),
  ('exp_list -> exp , exp_list','exp_list',3,'p_exp_list_1','cfrontend.py',230),
  ('exp_list -> exp','exp_list',1,'p_exp_list_2','cfrontend.py',236),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_opt_actual_args','cfrontend.py',243),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_opt_actual_args','cfrontend.py',244),
  ('actual_args -> exp , actual_args','actual_args',3,'p_actual_args','cfrontend.py',251),
  ('actual_args -> exp','actual_args',1,'p_actual_args','cfrontend.py',252),
  ('opt_exp -> exp','opt_exp',1,'p_opt_exp','cfrontend.py',262),
  ('opt_exp -> empty','opt_exp',1,'p_opt_exp','cfrontend.py',263),
  ('opt_else -> ELSE stmt','opt_else',2,'p_opt_else','cfrontend.py',270),
  ('opt_else -> empty','opt_else',1,'p_opt_else','cfrontend.py',271),
  ('exp -> exp + exp','exp',3,'p_exp_1','cfrontend.py',296),
  ('exp -> exp - exp','exp',3,'p_exp_2','cfrontend.py',302),
  ('exp -> exp * exp','exp',3,'p_exp_3','cfrontend.py',308),
  ('exp -> exp / exp','exp',3,'p_exp_4','cfrontend.py',314),
  ('exp -> exp EQ exp','exp',3,'p_exp_5','cfrontend.py',320),
  ('exp -> exp LE exp','exp',3,'p_exp_5','cfrontend.py',321),
  ('exp -> exp GE exp','exp',3,'p_exp_5','cfrontend.py',322),
  ('exp -> exp LT exp','exp',3,'p_exp_5','cfrontend.py',323),
  ('exp -> exp GT exp','exp',3,'p_exp_5','cfrontend.py',324),
  ('exp -> exp NE exp','exp',3,'p_exp_5','cfrontend.py',325),
  ('exp -> exp MOD exp','exp',3,'p_exp_5','cfrontend.py',326),
  ('exp -> exp AND exp','exp',3,'p_exp_5','cfrontend.py',327),
  ('exp -> exp OR exp','exp',3,'p_exp_5','cfrontend.py',328),
  ('exp -> INTEGER','exp',1,'p_exp_6','cfrontend.py',334),
  ('exp -> DOUBLE','exp',1,'p_exp_7','cfrontend.py',340),
  ('exp -> STRING','exp',1,'p_exp_8','cfrontend.py',346),
  ('exp -> storable','exp',1,'p_exp_9','cfrontend.py',352),
  ('exp -> ID ( opt_actual_args )','exp',4,'p_exp_10','cfrontend.py',358),
  ('exp -> ( exp )','exp',3,'p_exp_11','cfrontend.py',364),
  ('exp -> - exp','exp',2,'p_exp_12','cfrontend.py',370),
  ('exp -> NOT exp','exp',2,'p_exp_13','cfrontend.py',376),
  ('storable -> ID','storable',1,'p_storable_1','cfrontend.py',386),
  ('storable -> ID [ exp ]','storable',4,'p_storable_2','cfrontend.py',392),
  ('storable -> INC ID','storable',2,'p_storable_3','cfrontend.py',398),
  ('storable -> DEC ID','storable',2,'p_storable_3','cfrontend.py',399),
  ('storable -> INC ID [ exp ]','storable',5,'p_storable_4','cfrontend.py',410),
  ('storable -> DEC ID [ exp ]','storable',5,'p_storable_4','cfrontend.py',411),
  ('empty -> <empty>','empty',0,'p_empty','cfrontend.py',423),
]
