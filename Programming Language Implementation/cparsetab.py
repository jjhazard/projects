
# cparsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftEQLEleft+-left*/rightUMINUSNOTAE AND CHAR CHAR_TYPE DE DEC DOUBLE DOUBLE_TYPE ELSE EQ FOR GE GT ID IF INC INTEGER INTEGER_TYPE LE LT ME MOD NE NOT OR PRINT RETURN STRING STRING_TYPE TE VOID_TYPE WHILE\n    program : stmt_list\n    \n    stmt_list : stmt stmt_list\n              | empty\n    \n    stmt : VOID_TYPE ID '(' opt_formal_args ')' stmt\n    \n    stmt : data_type ID '(' opt_formal_args ')' stmt\n    \n    stmt : data_type ID opt_init ';'\n    \n    stmt : operable '=' exp ';'\n         | operable AE exp ';'\n         | operable ME exp ';'\n         | operable TE exp ';'\n         | operable DE exp ';'\n    \n    stmt : PRINT '(' exp ')' ';'\n    \n    stmt : ID '(' opt_actual_args ')' ';'\n    \n    stmt : RETURN opt_exp ';'\n    \n    stmt : WHILE '(' exp ')' stmt\n    \n    stmt : FOR '(' data_type ID '=' exp ';' exp ';' exp ')' stmt\n    \n    stmt : FOR '(' ID '=' exp ';' exp ';' exp ')' stmt\n    \n    stmt : IF '(' exp ')' stmt opt_else\n    \n    stmt : '{' stmt_list '}'\n    \n    data_type : primitive_type\n    \n    data_type : primitive_type '[' INTEGER ']'\n    \n    primitive_type : CHAR_TYPE\n    \n    primitive_type : INTEGER_TYPE\n    \n    primitive_type : DOUBLE_TYPE\n    \n    primitive_type :  STRING_TYPE\n    \n    opt_formal_args : formal_args\n                    | empty\n    \n    formal_args : data_type ID ',' formal_args\n    \n    formal_args : data_type ID\n    \n    opt_init : '=' exp\n    \n    opt_init : '=' '{' exp_list '}'\n    \n    opt_init : empty\n    \n    exp_list : exp ',' exp_list\n    \n    exp_list : exp\n    \n    opt_actual_args : actual_args\n                    | empty\n    \n    actual_args : exp ',' actual_args\n                | exp\n    \n    opt_exp : exp\n            | empty\n    \n    opt_else : ELSE stmt\n             | empty\n    \n    exp : exp '+' exp\n    \n    exp : exp '-' exp\n    \n    exp : exp '*' exp\n    \n    exp : exp '/' exp\n    \n    exp : exp EQ exp\n        | exp LE exp\n        | exp GE exp\n        | exp LT exp\n        | exp GT exp\n        | exp NE exp\n        | exp MOD exp\n        | exp AND exp\n        | exp OR exp\n    \n    exp : CHAR\n    \n    exp : INTEGER\n    \n    exp : DOUBLE\n    \n    exp : STRING\n    \n    exp : operable\n    \n    exp : ID '(' opt_actual_args ')'\n    \n    exp : '(' exp ')'\n    \n    exp : '-' exp %prec UMINUS\n    \n    exp : NOT exp\n    \n    operable : storable\n    \n    operable : INC storable\n    operable : DEC storable\n    \n    operable : storable INC\n    operable : storable DEC\n    \n    storable : '*' storable\n    \n    storable : ID\n    \n    storable : ID '[' exp ']'\n    \n    empty :\n    "
    
_lr_action_items = {'VOID_TYPE':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[5,5,5,-14,-19,-6,-7,-8,-9,-10,-11,5,5,5,-13,5,-12,-15,-73,-4,-5,-18,5,-42,-41,5,5,-17,-16,]),'PRINT':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[9,9,9,-14,-19,-6,-7,-8,-9,-10,-11,9,9,9,-13,9,-12,-15,-73,-4,-5,-18,9,-42,-41,9,9,-17,-16,]),'ID':([0,3,5,7,10,14,15,17,18,19,20,21,22,23,26,27,29,30,31,32,33,34,38,45,46,47,48,49,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,93,96,101,103,106,108,109,110,111,112,113,130,132,133,134,135,137,139,142,144,145,147,148,150,152,154,155,156,157,160,162,164,165,168,169,170,171,],[6,6,25,28,44,6,-20,55,55,-22,-23,-24,-25,55,44,44,44,44,44,44,44,44,44,44,44,44,94,44,44,-14,44,44,44,44,44,44,44,44,44,44,44,44,44,44,131,-19,136,44,-6,44,-7,-8,-9,-10,-11,6,44,6,-21,6,-13,6,-12,-15,44,-73,-4,-5,44,44,-18,6,-42,44,-41,44,44,6,6,-17,-16,]),'RETURN':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[10,10,10,-14,-19,-6,-7,-8,-9,-10,-11,10,10,10,-13,10,-12,-15,-73,-4,-5,-18,10,-42,-41,10,10,-17,-16,]),'WHILE':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[11,11,11,-14,-19,-6,-7,-8,-9,-10,-11,11,11,11,-13,11,-12,-15,-73,-4,-5,-18,11,-42,-41,11,11,-17,-16,]),'FOR':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[12,12,12,-14,-19,-6,-7,-8,-9,-10,-11,12,12,12,-13,12,-12,-15,-73,-4,-5,-18,12,-42,-41,12,12,-17,-16,]),'IF':([0,3,14,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[13,13,13,-14,-19,-6,-7,-8,-9,-10,-11,13,13,13,-13,13,-12,-15,-73,-4,-5,-18,13,-42,-41,13,13,-17,-16,]),'{':([0,3,14,66,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,150,155,156,157,162,168,169,170,171,],[14,14,14,108,-14,-19,-6,-7,-8,-9,-10,-11,14,14,14,-13,14,-12,-15,-73,-4,-5,-18,14,-42,-41,14,14,-17,-16,]),'$end':([0,1,2,3,4,24,74,96,106,109,110,111,112,113,137,142,144,147,148,150,155,157,162,170,171,],[-73,0,-1,-73,-3,-2,-14,-19,-6,-7,-8,-9,-10,-11,-13,-12,-15,-73,-4,-5,-18,-42,-41,-17,-16,]),'INC':([0,3,6,10,14,16,26,27,29,30,31,32,33,34,38,44,45,46,47,49,55,57,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,96,103,104,106,108,109,110,111,112,113,130,132,133,135,137,139,142,144,145,147,148,150,152,154,155,156,157,160,162,164,165,168,169,170,171,],[17,17,-71,17,17,52,17,17,17,17,17,17,17,17,17,-71,17,17,17,17,-71,-70,17,-14,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-19,17,-72,-6,17,-7,-8,-9,-10,-11,17,17,17,17,-13,17,-12,-15,17,-73,-4,-5,17,17,-18,17,-42,17,-41,17,17,17,17,-17,-16,]),'DEC':([0,3,6,10,14,16,26,27,29,30,31,32,33,34,38,44,45,46,47,49,55,57,66,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,96,103,104,106,108,109,110,111,112,113,130,132,133,135,137,139,142,144,145,147,148,150,152,154,155,156,157,160,162,164,165,168,169,170,171,],[18,18,-71,18,18,53,18,18,18,18,18,18,18,18,18,-71,18,18,18,18,-71,-70,18,-14,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-19,18,-72,-6,18,-7,-8,-9,-10,-11,18,18,18,18,-13,18,-12,-15,18,-73,-4,-5,18,18,-18,18,-42,18,-41,18,18,18,18,-17,-16,]),'CHAR_TYPE':([0,3,14,48,58,64,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,149,150,155,156,157,162,168,169,170,171,],[19,19,19,19,19,19,-14,-19,-6,-7,-8,-9,-10,-11,19,19,19,-13,19,-12,-15,-73,-4,19,-5,-18,19,-42,-41,19,19,-17,-16,]),'INTEGER_TYPE':([0,3,14,48,58,64,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,149,150,155,156,157,162,168,169,170,171,],[20,20,20,20,20,20,-14,-19,-6,-7,-8,-9,-10,-11,20,20,20,-13,20,-12,-15,-73,-4,20,-5,-18,20,-42,-41,20,20,-17,-16,]),'DOUBLE_TYPE':([0,3,14,48,58,64,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,149,150,155,156,157,162,168,169,170,171,],[21,21,21,21,21,21,-14,-19,-6,-7,-8,-9,-10,-11,21,21,21,-13,21,-12,-15,-73,-4,21,-5,-18,21,-42,-41,21,21,-17,-16,]),'STRING_TYPE':([0,3,14,48,58,64,74,96,106,109,110,111,112,113,130,133,135,137,139,142,144,147,148,149,150,155,156,157,162,168,169,170,171,],[22,22,22,22,22,22,-14,-19,-6,-7,-8,-9,-10,-11,22,22,22,-13,22,-12,-15,-73,-4,22,-5,-18,22,-42,-41,22,22,-17,-16,]),'*':([0,3,10,14,16,17,18,23,26,27,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,49,52,53,54,55,56,57,62,63,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,103,104,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,129,130,132,133,135,137,139,141,142,143,144,145,146,147,148,150,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,170,171,],[23,23,23,23,-65,23,23,23,23,23,23,23,23,23,23,23,77,23,-56,-57,-58,-59,-60,-71,23,23,23,23,-68,-69,-66,-71,-67,-70,77,77,23,77,77,77,77,77,77,-14,23,23,23,23,23,23,23,23,23,23,23,23,23,-63,23,77,-64,77,77,-19,23,-72,-6,77,23,-7,-8,-9,-10,-11,77,77,-45,-46,77,77,77,77,77,77,77,77,77,-62,23,23,23,23,-13,23,77,-12,-61,-15,23,77,-73,-4,-5,23,77,23,-18,23,-42,23,77,-41,77,23,23,77,77,23,23,-17,-16,]),'}':([3,4,14,16,24,39,40,41,42,43,44,50,52,53,54,55,56,57,74,88,91,96,104,106,109,110,111,112,113,115,116,117,118,119,120,121,122,123,124,125,126,127,129,137,140,141,142,143,144,147,148,150,155,157,159,162,170,171,],[-73,-3,-73,-65,-2,-56,-57,-58,-59,-60,-71,96,-68,-69,-66,-71,-67,-70,-14,-63,-64,-19,-72,-6,-7,-8,-9,-10,-11,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-13,151,-34,-12,-61,-15,-73,-4,-5,-18,-42,-33,-41,-17,-16,]),'(':([6,9,10,11,12,13,25,26,27,28,29,30,31,32,33,34,38,44,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[26,34,45,47,48,49,58,45,45,64,45,45,45,45,45,45,45,89,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'=':([6,8,16,28,52,53,54,55,56,57,94,104,131,],[-71,29,-65,66,-68,-69,-66,-71,-67,-70,132,-72,145,]),'AE':([6,8,16,52,53,54,55,56,57,104,],[-71,30,-65,-68,-69,-66,-71,-67,-70,-72,]),'ME':([6,8,16,52,53,54,55,56,57,104,],[-71,31,-65,-68,-69,-66,-71,-67,-70,-72,]),'TE':([6,8,16,52,53,54,55,56,57,104,],[-71,32,-65,-68,-69,-66,-71,-67,-70,-72,]),'DE':([6,8,16,52,53,54,55,56,57,104,],[-71,33,-65,-68,-69,-66,-71,-67,-70,-72,]),'[':([6,15,19,20,21,22,44,55,],[27,51,-22,-23,-24,-25,27,27,]),'CHAR':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'INTEGER':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,51,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,97,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'DOUBLE':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'STRING':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'-':([10,16,26,27,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,49,52,53,54,55,56,57,62,63,66,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,103,104,107,108,115,116,117,118,119,120,121,122,123,124,125,126,127,129,132,141,143,145,146,152,153,154,160,161,163,164,165,166,167,],[38,-65,38,38,38,38,38,38,38,38,76,38,-56,-57,-58,-59,-60,-71,38,38,38,38,-68,-69,-66,-71,-67,-70,76,76,38,76,76,76,76,76,76,38,38,38,38,38,38,38,38,38,38,38,38,38,-63,38,76,-64,76,76,38,-72,76,38,-43,-44,-45,-46,76,76,76,76,76,76,76,76,76,-62,38,76,-61,38,76,38,76,38,38,76,76,38,38,76,76,]),'NOT':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),';':([10,16,28,35,36,37,39,40,41,42,43,44,52,53,54,55,56,57,65,67,68,69,70,71,72,88,91,102,104,107,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,143,146,151,153,161,163,],[-73,-65,-73,74,-39,-40,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,106,-32,109,110,111,112,113,-63,-64,137,-72,-30,142,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-61,154,-31,160,164,165,]),'+':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,75,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,75,75,75,75,75,75,75,75,-63,75,-64,75,75,-72,75,-43,-44,-45,-46,75,75,75,75,75,75,75,75,75,-62,75,-61,75,75,75,75,75,75,]),'/':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,78,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,78,78,78,78,78,78,78,78,-63,78,-64,78,78,-72,78,78,78,-45,-46,78,78,78,78,78,78,78,78,78,-62,78,-61,78,78,78,78,78,78,]),'EQ':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,79,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,79,79,79,79,79,79,79,79,-63,79,-64,79,79,-72,79,-43,-44,-45,-46,-47,-48,79,79,79,79,79,79,79,-62,79,-61,79,79,79,79,79,79,]),'LE':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,80,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,80,80,80,80,80,80,80,80,-63,80,-64,80,80,-72,80,-43,-44,-45,-46,-47,-48,80,80,80,80,80,80,80,-62,80,-61,80,80,80,80,80,80,]),'GE':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,81,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,81,81,81,81,81,81,81,81,-63,81,-64,81,81,-72,81,-43,-44,-45,-46,-47,-48,81,81,81,81,81,81,81,-62,81,-61,81,81,81,81,81,81,]),'LT':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,82,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,82,82,82,82,82,82,82,82,-63,82,-64,82,82,-72,82,-43,-44,-45,-46,-47,-48,82,82,82,82,82,82,82,-62,82,-61,82,82,82,82,82,82,]),'GT':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,83,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,83,83,83,83,83,83,83,83,-63,83,-64,83,83,-72,83,-43,-44,-45,-46,-47,-48,83,83,83,83,83,83,83,-62,83,-61,83,83,83,83,83,83,]),'NE':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,84,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,84,84,84,84,84,84,84,84,-63,84,-64,84,84,-72,84,-43,-44,-45,-46,-47,-48,84,84,84,84,84,84,84,-62,84,-61,84,84,84,84,84,84,]),'MOD':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,85,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,85,85,85,85,85,85,85,85,-63,85,-64,85,85,-72,85,-43,-44,-45,-46,-47,-48,85,85,85,85,85,85,85,-62,85,-61,85,85,85,85,85,85,]),'AND':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,86,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,86,86,86,86,86,86,86,86,-63,86,-64,86,86,-72,86,-43,-44,-45,-46,-47,-48,86,86,86,86,86,86,86,-62,86,-61,86,86,86,86,86,86,]),'OR':([16,36,39,40,41,42,43,44,52,53,54,55,56,57,62,63,68,69,70,71,72,73,88,90,91,92,95,104,107,115,116,117,118,119,120,121,122,123,124,125,126,127,129,141,143,146,153,161,163,166,167,],[-65,87,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,87,87,87,87,87,87,87,87,-63,87,-64,87,87,-72,87,-43,-44,-45,-46,-47,-48,87,87,87,87,87,87,87,-62,87,-61,87,87,87,87,87,87,]),',':([16,39,40,41,42,43,44,52,53,54,55,56,57,62,88,91,104,115,116,117,118,119,120,121,122,123,124,125,126,127,129,136,141,143,],[-65,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,103,-63,-64,-72,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,149,152,-61,]),')':([16,26,39,40,41,42,43,44,52,53,54,55,56,57,58,59,60,61,62,64,73,88,89,90,91,92,95,98,99,100,104,105,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,136,138,143,158,166,167,],[-65,-73,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,-73,102,-35,-36,-38,-73,114,-63,-73,129,-64,130,133,135,-26,-27,-72,139,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,143,-62,-29,-37,-61,-28,168,169,]),']':([16,39,40,41,42,43,44,52,53,54,55,56,57,63,88,91,97,104,115,116,117,118,119,120,121,122,123,124,125,126,127,129,143,],[-65,-56,-57,-58,-59,-60,-71,-68,-69,-66,-71,-67,-70,104,-63,-64,134,-72,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-61,]),'ELSE':([74,96,106,109,110,111,112,113,137,142,144,147,148,150,155,157,162,170,171,],[-14,-19,-6,-7,-8,-9,-10,-11,-13,-12,-15,156,-4,-5,-18,-42,-41,-17,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,14,],[2,24,50,]),'stmt':([0,3,14,130,133,135,139,156,168,169,],[3,3,3,144,147,148,150,162,170,171,]),'empty':([0,3,10,14,26,28,58,64,89,147,],[4,4,37,4,61,67,100,100,61,157,]),'data_type':([0,3,14,48,58,64,130,133,135,139,149,156,168,169,],[7,7,7,93,101,101,7,7,7,7,101,7,7,7,]),'operable':([0,3,10,14,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,130,132,133,135,139,145,152,154,156,160,164,165,168,169,],[8,8,43,8,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,8,43,8,8,8,43,43,43,8,43,43,43,8,8,]),'primitive_type':([0,3,14,48,58,64,130,133,135,139,149,156,168,169,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'storable':([0,3,10,14,17,18,23,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,130,132,133,135,139,145,152,154,156,160,164,165,168,169,],[16,16,16,16,54,56,57,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'opt_exp':([10,],[35,]),'exp':([10,26,27,29,30,31,32,33,34,38,45,46,47,49,66,75,76,77,78,79,80,81,82,83,84,85,86,87,89,103,108,132,145,152,154,160,164,165,],[36,62,63,68,69,70,71,72,73,88,90,91,92,95,107,115,116,117,118,119,120,121,122,123,124,125,126,127,62,62,141,146,153,141,161,163,166,167,]),'opt_actual_args':([26,89,],[59,128,]),'actual_args':([26,89,103,],[60,60,138,]),'opt_init':([28,],[65,]),'opt_formal_args':([58,64,],[98,105,]),'formal_args':([58,64,149,],[99,99,158,]),'exp_list':([108,152,],[140,159,]),'opt_else':([147,],[155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_prog','cfrontend.py',23),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','cfrontend.py',30),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','cfrontend.py',31),
  ('stmt -> VOID_TYPE ID ( opt_formal_args ) stmt','stmt',6,'p_stmt_1','cfrontend.py',53),
  ('stmt -> data_type ID ( opt_formal_args ) stmt','stmt',6,'p_stmt_2','cfrontend.py',59),
  ('stmt -> data_type ID opt_init ;','stmt',4,'p_stmt_3','cfrontend.py',65),
  ('stmt -> operable = exp ;','stmt',4,'p_stmt_4','cfrontend.py',71),
  ('stmt -> operable AE exp ;','stmt',4,'p_stmt_4','cfrontend.py',72),
  ('stmt -> operable ME exp ;','stmt',4,'p_stmt_4','cfrontend.py',73),
  ('stmt -> operable TE exp ;','stmt',4,'p_stmt_4','cfrontend.py',74),
  ('stmt -> operable DE exp ;','stmt',4,'p_stmt_4','cfrontend.py',75),
  ('stmt -> PRINT ( exp ) ;','stmt',5,'p_stmt_5','cfrontend.py',92),
  ('stmt -> ID ( opt_actual_args ) ;','stmt',5,'p_stmt_6','cfrontend.py',98),
  ('stmt -> RETURN opt_exp ;','stmt',3,'p_stmt_7','cfrontend.py',104),
  ('stmt -> WHILE ( exp ) stmt','stmt',5,'p_stmt_8','cfrontend.py',110),
  ('stmt -> FOR ( data_type ID = exp ; exp ; exp ) stmt','stmt',12,'p_stmt_9','cfrontend.py',116),
  ('stmt -> FOR ( ID = exp ; exp ; exp ) stmt','stmt',11,'p_stmt_10','cfrontend.py',122),
  ('stmt -> IF ( exp ) stmt opt_else','stmt',6,'p_stmt_11','cfrontend.py',128),
  ('stmt -> { stmt_list }','stmt',3,'p_stmt_12','cfrontend.py',134),
  ('data_type -> primitive_type','data_type',1,'p_data_type_1','cfrontend.py',144),
  ('data_type -> primitive_type [ INTEGER ]','data_type',4,'p_data_type_2','cfrontend.py',150),
  ('primitive_type -> CHAR_TYPE','primitive_type',1,'p_primitive_type_1','cfrontend.py',161),
  ('primitive_type -> INTEGER_TYPE','primitive_type',1,'p_primitive_type_2','cfrontend.py',167),
  ('primitive_type -> DOUBLE_TYPE','primitive_type',1,'p_primitive_type_3','cfrontend.py',173),
  ('primitive_type -> STRING_TYPE','primitive_type',1,'p_primitive_type_4','cfrontend.py',179),
  ('opt_formal_args -> formal_args','opt_formal_args',1,'p_opt_formal_args','cfrontend.py',186),
  ('opt_formal_args -> empty','opt_formal_args',1,'p_opt_formal_args','cfrontend.py',187),
  ('formal_args -> data_type ID , formal_args','formal_args',4,'p_formal_args_1','cfrontend.py',197),
  ('formal_args -> data_type ID','formal_args',2,'p_formal_args_2','cfrontend.py',203),
  ('opt_init -> = exp','opt_init',2,'p_opt_init_1','cfrontend.py',214),
  ('opt_init -> = { exp_list }','opt_init',4,'p_opt_init_2','cfrontend.py',220),
  ('opt_init -> empty','opt_init',1,'p_opt_init_3','cfrontend.py',226),
  ('exp_list -> exp , exp_list','exp_list',3,'p_exp_list_1','cfrontend.py',236),
  ('exp_list -> exp','exp_list',1,'p_exp_list_2','cfrontend.py',242),
  ('opt_actual_args -> actual_args','opt_actual_args',1,'p_opt_actual_args','cfrontend.py',249),
  ('opt_actual_args -> empty','opt_actual_args',1,'p_opt_actual_args','cfrontend.py',250),
  ('actual_args -> exp , actual_args','actual_args',3,'p_actual_args','cfrontend.py',257),
  ('actual_args -> exp','actual_args',1,'p_actual_args','cfrontend.py',258),
  ('opt_exp -> exp','opt_exp',1,'p_opt_exp','cfrontend.py',268),
  ('opt_exp -> empty','opt_exp',1,'p_opt_exp','cfrontend.py',269),
  ('opt_else -> ELSE stmt','opt_else',2,'p_opt_else','cfrontend.py',276),
  ('opt_else -> empty','opt_else',1,'p_opt_else','cfrontend.py',277),
  ('exp -> exp + exp','exp',3,'p_exp_1','cfrontend.py',302),
  ('exp -> exp - exp','exp',3,'p_exp_2','cfrontend.py',308),
  ('exp -> exp * exp','exp',3,'p_exp_3','cfrontend.py',314),
  ('exp -> exp / exp','exp',3,'p_exp_4','cfrontend.py',320),
  ('exp -> exp EQ exp','exp',3,'p_exp_5','cfrontend.py',326),
  ('exp -> exp LE exp','exp',3,'p_exp_5','cfrontend.py',327),
  ('exp -> exp GE exp','exp',3,'p_exp_5','cfrontend.py',328),
  ('exp -> exp LT exp','exp',3,'p_exp_5','cfrontend.py',329),
  ('exp -> exp GT exp','exp',3,'p_exp_5','cfrontend.py',330),
  ('exp -> exp NE exp','exp',3,'p_exp_5','cfrontend.py',331),
  ('exp -> exp MOD exp','exp',3,'p_exp_5','cfrontend.py',332),
  ('exp -> exp AND exp','exp',3,'p_exp_5','cfrontend.py',333),
  ('exp -> exp OR exp','exp',3,'p_exp_5','cfrontend.py',334),
  ('exp -> CHAR','exp',1,'p_exp_6','cfrontend.py',340),
  ('exp -> INTEGER','exp',1,'p_exp_7','cfrontend.py',346),
  ('exp -> DOUBLE','exp',1,'p_exp_8','cfrontend.py',352),
  ('exp -> STRING','exp',1,'p_exp_9','cfrontend.py',358),
  ('exp -> operable','exp',1,'p_exp_10','cfrontend.py',364),
  ('exp -> ID ( opt_actual_args )','exp',4,'p_exp_11','cfrontend.py',370),
  ('exp -> ( exp )','exp',3,'p_exp_12','cfrontend.py',376),
  ('exp -> - exp','exp',2,'p_exp_13','cfrontend.py',382),
  ('exp -> NOT exp','exp',2,'p_exp_14','cfrontend.py',388),
  ('operable -> storable','operable',1,'p_operable_1','cfrontend.py',396),
  ('operable -> INC storable','operable',2,'p_operable_2','cfrontend.py',402),
  ('operable -> DEC storable','operable',2,'p_operable_2','cfrontend.py',403),
  ('operable -> storable INC','operable',2,'p_operable_3','cfrontend.py',414),
  ('operable -> storable DEC','operable',2,'p_operable_3','cfrontend.py',415),
  ('storable -> * storable','storable',2,'p_storable_1','cfrontend.py',430),
  ('storable -> ID','storable',1,'p_storable_2','cfrontend.py',436),
  ('storable -> ID [ exp ]','storable',4,'p_storable_3','cfrontend.py',442),
  ('empty -> <empty>','empty',0,'p_empty','cfrontend.py',449),
]
